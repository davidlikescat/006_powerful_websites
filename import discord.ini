import discord
import asyncio
import re
from sub1 import extract_text_from_url, gemini_extract_notion_fields, flatten_fields_for_airtable
from sub2 import send_to_airtable, send_to_telegram
from sub3 import process_script_to_tts_google_drive  # Google Drive TTS 사용
import os
from dotenv import load_dotenv
import json

# 환경 변수 로드
load_dotenv()

# Discord 설정
TOKEN = os.getenv('DISCORD_TOKEN')
CHANNEL_ID = int(os.getenv('DISCORD_CHANNEL_ID'))

# API 키 설정
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')

# Airtable 설정
AIRTABLE_API_KEY = os.getenv('AIRTABLE_API_KEY')
AIRTABLE_BASE_ID = os.getenv('AIRTABLE_BASE_ID')
AIRTABLE_TABLE_NAME = os.getenv('AIRTABLE_TABLE_NAME')

# Discord 클라이언트 설정
intents = discord.Intents.default()
intents.messages = True
intents.message_content = True
client = discord.Client(intents=intents)

async def process_url(url):
    try:
        print("=" * 50)
        print(f"URL 처리 시작: {url}")
        
        # 1. 텍스트 추출
        print("1. 텍스트 추출 중...")
        text = extract_text_from_url(url)
        print(f"추출된 텍스트 길이: {len(text)}")
        
        # 2. Gemini 분석
        print("2. Gemini 분석 중...")
        notion_data = gemini_extract_notion_fields(text, url, GEMINI_API_KEY)
        print(f"Gemini 결과: {json.dumps(notion_data, ensure_ascii=False, indent=2)}")
        
        # 3. Airtable용 변환
        print("3. Airtable용 데이터 변환 중...")
        filtered_data = flatten_fields_for_airtable(notion_data)
        print(f"변환 후 카테고리: '{filtered_data.get('카테고리')}' (타입: {type(filtered_data.get('카테고리'))})")
        print(f"최종 전송 데이터: {json.dumps(filtered_data, ensure_ascii=False, indent=2)}")
        
        # 4. TTS 처리
        print("4. 영어 스크립트 TTS 변환 중...")
        english_script = filtered_data.get('Script', '')
        
        if english_script and english_script.strip():
            tts_result = process_script_to_tts_google_drive(
                english_script, 
                voice_name="en-US-Journey-F"  # 여성, 따뜻하고 자연스러운
            )
            
            if tts_result["success"]:
                print(f"✅ TTS 변환 성공: {tts_result['audio_url']}")
                # TTS URL을 데이터에 추가
                filtered_data["TTS_URL"] = tts_result["audio_url"]
                filtered_data["TTS_파일명"] = tts_result["filename"]
                filtered_data["Drive_파일ID"] = tts_result.get("file_id", "")
            else:
                print("❌ TTS 변환 실패")
                filtered_data["TTS_URL"] = "TTS 생성 실패"
                filtered_data["TTS_파일명"] = ""
                filtered_data["Drive_파일ID"] = ""
        else:
            print("⚠️ 영어 스크립트가 없어서 TTS 건너뜀")
            filtered_data["TTS_URL"] = "스크립트 없음"
            filtered_data["TTS_파일명"] = ""
            filtered_data["Drive_파일ID"] = ""
        
        # 5. Airtable 전송
        print("5. Airtable 전송 중...")
        airtable_success = send_to_airtable(AIRTABLE_API_KEY, AIRTABLE_BASE_ID, AIRTABLE_TABLE_NAME, filtered_data)
        
        # 6. 텔레그램 전송
        if airtable_success:
            print("6. 텔레그램 전송 중...")
            telegram_msg = f"📝 새로운 웹사이트 정보\n\n{filtered_data.get('요약 설명', '')}\n\n{filtered_data.get('URL', url)}"
            
            # TTS URL이 있으면 텔레그램 메시지에 추가
            if filtered_data.get("TTS_URL") and "http" in filtered_data.get("TTS_URL", ""):
                telegram_msg += f"\n\n🎙️ 영어 음성: {filtered_data['TTS_URL']}"
            
            telegram_success = send_to_telegram(TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, telegram_msg)
            return telegram_success
        else:
            print("❌ Airtable 저장 실패로 텔레그램 전송 건너뜀")
            return False
            
    except Exception as e:
        print(f"❌ 에러 발생: {str(e)}")
        import traceback
        print(traceback.format_exc())
        return False

@client.event
async def on_ready():
    print(f'{client.user} has connected to Discord!')

@client.event
async def on_message(message):
    print("on_message 이벤트 감지됨")
    if message.channel.id == CHANNEL_ID and message.author != client.user:
        print(f"메시지 감지: {message.content}")
        urls = re.findall(r'(https?://[^\s]+)', message.content)
        for url in urls:
            print(f"URL 감지: {url}")
            status_msg = await message.channel.send(f'🔄 **웹사이트 요약을 시작합니다!**\nURL: {url}')
            try:
                print("=" * 50)
                print(f"URL 처리 시작: {url}")
                
                # 1. 텍스트 추출
                print("1. 본문 크롤링 시작")
                text = extract_text_from_url(url)
                print(f"추출된 텍스트 길이: {len(text)}")
                
                # 2. Gemini 분석
                print("2. Gemini 요약 시작")
                notion_data = gemini_extract_notion_fields(text, url, GEMINI_API_KEY)
                print(f"Gemini 원본 결과: {json.dumps(notion_data, ensure_ascii=False, indent=2)}")
                
                # 3. Airtable용 변환
                print("3. Airtable용 데이터 변환")
                filtered_data = flatten_fields_for_airtable(notion_data)
                print("=" * 30)
                print(f"최종 Airtable 전송 데이터:")
                print(f"카테고리: '{filtered_data.get('카테고리')}' (타입: {type(filtered_data.get('카테고리'))})")
                print(f"전체 데이터: {json.dumps(filtered_data, ensure_ascii=False, indent=2)}")
                print("=" * 30)
                
                # 4. TTS 처리
                print("4. 영어 스크립트 TTS 변환 중...")
                english_script = filtered_data.get('Script', '')
                
                if english_script and english_script.strip():
                    await status_msg.edit(content=f'🎙️ **TTS 음성 생성 중...**\nURL: {url}')
                    
                    tts_result = process_script_to_tts_google_drive(
                        english_script, 
                        voice_name="en-US-Journey-F"  # 여성, 따뜻하고 자연스러운
                    )
                    
                    if tts_result["success"]:
                        print(f"✅ TTS 변환 성공: {tts_result['audio_url']}")
                        # TTS URL을 데이터에 추가
                        filtered_data["TTS_URL"] = tts_result["audio_url"]
                        filtered_data["TTS_파일명"] = tts_result["filename"]
                        filtered_data["Drive_파일ID"] = tts_result.get("file_id", "")
                    else:
                        print("❌ TTS 변환 실패")
                        filtered_data["TTS_URL"] = "TTS 생성 실패"
                        filtered_data["TTS_파일명"] = ""
                        filtered_data["Drive_파일ID"] = ""
                else:
                    print("⚠️ 영어 스크립트가 없어서 TTS 건너뜀")
                    filtered_data["TTS_URL"] = "스크립트 없음"
                    filtered_data["TTS_파일명"] = ""
                    filtered_data["Drive_파일ID"] = ""
                
                # 5. Airtable 전송
                print("5. Airtable 전송 시도")
                await status_msg.edit(content=f'💾 **Airtable 저장 중...**\nURL: {url}')
                
                airtable_success = send_to_airtable(AIRTABLE_API_KEY, AIRTABLE_BASE_ID, AIRTABLE_TABLE_NAME, filtered_data)
                
                if not airtable_success:
                    print("❌ Airtable 저장 실패!")
                    await status_msg.edit(content=f"❌ Airtable 저장에 실패했습니다. 터미널 로그를 확인하세요.")
                    return
                
                print("✅ Airtable 저장 성공!")
                
                # 6. 텔레그램 전송
                print("6. 텔레그램 전송 시도")
                telegram_msg = f"📝 새로운 웹사이트 정보\n\n{filtered_data.get('요약 설명', '')}\n\n{filtered_data.get('URL', url)}"
                
                # TTS URL이 있으면 텔레그램 메시지에 추가
                if filtered_data.get("TTS_URL") and "http" in filtered_data.get("TTS_URL", ""):
                    telegram_msg += f"\n\n🎙️ 영어 음성: {filtered_data['TTS_URL']}"
                
                telegram_success = send_to_telegram(TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, telegram_msg)
                
                print("7. 모든 작업 완료")
                
                # 7. 성공 메시지(Embed) - TTS 정보 포함
                embed = discord.Embed(
                    title="✅ 웹사이트 요약/저장 완료!",
                    description=f"**{filtered_data.get('사이트 이름', '')}**\n{filtered_data.get('요약 설명', '')}",
                    color=0x2ecc71
                )
                embed.add_field(name="카테고리", value=filtered_data.get('카테고리', '-') or "-", inline=True)
                embed.add_field(name="평가/효용성", value=filtered_data.get('평가/효용성', '-') or "-", inline=True)
                embed.add_field(name="활용 사례", value=filtered_data.get('활용 사례', '-') or "-", inline=True)
                embed.add_field(name="한국어 스크립트", value="✅ 완료", inline=True)
                embed.add_field(name="영어 스크립트", value="✅ 완료", inline=True)
                
                # TTS 결과 표시
                tts_status = "✅ 완료" if filtered_data.get("TTS_URL") and "http" in filtered_data.get("TTS_URL", "") else "❌ 실패"
                embed.add_field(name="영어 TTS 음성", value=tts_status, inline=True)
                
                embed.add_field(name="Airtable 저장", value="✅ 성공", inline=False)
                embed.add_field(name="텔레그램 전송", value="✅ 성공" if telegram_success else "❌ 실패", inline=False)
                
                # TTS URL이 있으면 임베드에 추가
                if filtered_data.get("TTS_URL") and "http" in filtered_data.get("TTS_URL", ""):
                    embed.add_field(name="🎙️ 영어 음성 파일", value=f"[재생하기]({filtered_data['TTS_URL']})", inline=False)
                
                embed.set_footer(text=f"URL: {filtered_data.get('URL', url)}")
                await status_msg.edit(content=None, embed=embed)
                
            except Exception as e:
                print(f"❌ 에러 발생: {str(e)}")
                import traceback
                print(traceback.format_exc())
                await status_msg.edit(content=f"❌ 처리 중 오류가 발생했습니다: {str(e)}")

if __name__ == "__main__":
    client.run(TOKEN)